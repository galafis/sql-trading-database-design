name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  test:
    name: Run Database Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: trading_db_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
      
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
      
      - name: Enable TimescaleDB extension
        env:
          PGPASSWORD: postgres
        run: |
          psql -h localhost -U postgres -d trading_db_test -c "CREATE EXTENSION IF NOT EXISTS timescaledb;"
          psql -h localhost -U postgres -d trading_db_test -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
          psql -h localhost -U postgres -d trading_db_test -c "CREATE EXTENSION IF NOT EXISTS \"pgcrypto\";"
      
      - name: Create database schema
        env:
          PGPASSWORD: postgres
        run: |
          psql -h localhost -U postgres -d trading_db_test -f schema/01_core_tables.sql
          psql -h localhost -U postgres -d trading_db_test -f schema/02_trading_tables.sql
          psql -h localhost -U postgres -d trading_db_test -f schema/03_market_data.sql
      
      - name: Load functions
        env:
          PGPASSWORD: postgres
        run: |
          psql -h localhost -U postgres -d trading_db_test -f functions/position_functions.sql
          psql -h localhost -U postgres -d trading_db_test -f functions/pnl_functions.sql
      
      - name: Load procedures
        env:
          PGPASSWORD: postgres
        run: |
          psql -h localhost -U postgres -d trading_db_test -f procedures/order_execution.sql
          psql -h localhost -U postgres -d trading_db_test -f procedures/settlement.sql
      
      - name: Load triggers
        env:
          PGPASSWORD: postgres
        run: |
          psql -h localhost -U postgres -d trading_db_test -f triggers/audit_triggers.sql || true
          psql -h localhost -U postgres -d trading_db_test -f triggers/validation_triggers.sql || true
      
      - name: Load views
        env:
          PGPASSWORD: postgres
        run: |
          psql -h localhost -U postgres -d trading_db_test -f views/portfolio_view.sql
          psql -h localhost -U postgres -d trading_db_test -f views/risk_view.sql || true
          psql -h localhost -U postgres -d trading_db_test -f views/pnl_view.sql || true
      
      - name: Install pgTAP
        env:
          PGPASSWORD: postgres
        run: |
          # Find the PostgreSQL container ID
          CONTAINER_ID=$(docker ps --filter "ancestor=timescale/timescaledb:latest-pg15" --format "{{.ID}}")
          echo "PostgreSQL container ID: $CONTAINER_ID"
          
          # Install pgTAP inside the PostgreSQL container
          docker exec $CONTAINER_ID sh -c "
            apk add --no-cache build-base git perl && \
            git clone https://github.com/theory/pgtap.git /tmp/pgtap && \
            cd /tmp/pgtap && \
            make && \
            make install
          "
          
          # Verify installation and create extension
          psql -h localhost -U postgres -d trading_db_test -c "CREATE EXTENSION IF NOT EXISTS pgtap;"
          
          # Install pg_prove for running TAP tests on the runner
          sudo apt-get install -y libtap-parser-sourcehandler-pgtap-perl
      
      - name: Run unit tests
        env:
          PGPASSWORD: postgres
        run: |
          # Run tests with pg_prove which properly handles TAP output
          pg_prove -h localhost -U postgres -d trading_db_test tests/unit/*.sql
      
      - name: Validate schema
        env:
          PGPASSWORD: postgres
        run: |
          echo "Checking tables..."
          psql -h localhost -U postgres -d trading_db_test -c "\dt"
          echo "Checking functions..."
          psql -h localhost -U postgres -d trading_db_test -c "\df"
          echo "Checking views..."
          psql -h localhost -U postgres -d trading_db_test -c "\dv"

  lint:
    name: SQL Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Check SQL files exist
        run: |
          echo "Checking required SQL files..."
          [ -f schema/01_core_tables.sql ] || exit 1
          [ -f schema/02_trading_tables.sql ] || exit 1
          [ -f schema/03_market_data.sql ] || exit 1
          [ -f functions/position_functions.sql ] || exit 1
          [ -f procedures/order_execution.sql ] || exit 1
          [ -f views/portfolio_view.sql ] || exit 1
          echo "All required files found!"
      
      - name: Check for SQL syntax errors (basic)
        run: |
          echo "Performing basic SQL syntax checks..."
          for file in schema/*.sql functions/*.sql procedures/*.sql views/*.sql triggers/*.sql; do
            if [ -f "$file" ]; then
              echo "Checking $file..."
              # Basic check for common syntax errors
              grep -i "CREATE\|SELECT\|INSERT\|UPDATE\|DELETE" "$file" > /dev/null || echo "Warning: $file might be empty or invalid"
            fi
          done

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Check documentation files
        run: |
          echo "Checking documentation..."
          [ -f README.md ] || exit 1
          [ -f docs/data_dictionary.md ] || exit 1
          [ -f docs/query_optimization.md ] || exit 1
          [ -f docs/CONTRIBUTING.md ] || exit 1
          echo "Documentation files found!"
      
      - name: Check README completeness
        run: |
          echo "Validating README.md..."
          grep -q "Quick Start" README.md || exit 1
          grep -q "Database Schema" README.md || exit 1
          grep -q "Testing" README.md || exit 1
          grep -q "License" README.md || exit 1
          echo "README.md is complete!"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Check for hardcoded credentials
        run: |
          echo "Scanning for potential security issues..."
          # Check for common patterns that might indicate hardcoded credentials
          ! grep -ri "password\s*=\s*['\"]" --include="*.sql" . || exit 1
          ! grep -ri "secret\s*=\s*['\"]" --include="*.sql" . || exit 1
          echo "No obvious security issues found!"

  build-badge:
    name: Generate Test Badge
    runs-on: ubuntu-latest
    needs: [test, lint, documentation]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Create success badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: YOUR_GIST_ID  # Replace with actual Gist ID
          filename: trading-db-tests.json
          label: Tests
          message: Passing
          color: green
